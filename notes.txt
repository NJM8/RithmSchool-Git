# RithmSchool-Git
Notes from Rithm Schools Git Course

BASICS

git init  
  Initializes an empty git repository in the current working folder.

rm -rf .git
  Use this to remove the git repository

git add fileName
  Stages a file before committing

git add .
  Adds all new and changed files to staging

git commit -m 'myMessage'
  Commits all staged content to the git repository

git log
  Shows a history of all commits (q to exit), use --oneline for readability

git config --global user.name "YOUR NAME"
  Set user name to use for all git repositories on your machine

git config --global user.email "YOUR EMAIL"
  Set user email to use for all git repositories on your machine

git config --global --replace-all core.pager cat
  Removes the need to hit q to exit git log

cat ~/.gitconfig
  View all your settings

git config alias.KEYBOARD_SHORTCUT COMMAND
  Shortcut a git command that you use often, example git config alias.st status will let you type git st instead of git status, this only lasts until the terminal window is open.

git config --global alias.KEYBOARD_SHORTCUT COMMAND
  Will save your shortcut globally

git config --global
  Show options on global parameters 

REMOVING AND RESETTING

git checkout NAME_OF_FILE 
  Removes changes to a file that are untracked. Be careful this cannot be undone

git clean -df 
  Removes untracked files, also cannot be undone

git rm --cached NAME_OF_FILE
  Removes staged changes back to the working directory

git reset --hard HEAD
  Removes all chages from staging area and working directory. Cannot be undone

git reset --soft COMMIT_SHA 
  Moves the files committed back to the staging area

git reset --mixed COMMIT_SHA 
  Moves the files committed back to the working directory (if you use git reset without a flag, the default will be --mixed)

git reset --hard COMMIT_SHA 
  Undoes the entire commit (dangerous!!!)

BRANCHING

git branch 
  Lists all current branches

git checkout -b NAME_OF_BRANCH
  Create a new branch

git checkout NAME_OF_BRANCH
  Moves to branch

git branch -D NAME_OF_BRANCH
  Deletes the branch, make sure you are not on it currently

MERGING

git merge NAME_OF_BRANCH
  Merges commits from branch to current working directory. When there are conflicts, open the conflicting file and select what changes you want to keep, then stage and commit the file.

git log --oneline --decorate
  Should display nice coloring for branches

git diff
  See changes in the working tree not yet staged for the next commit.

git diff --cached
  See Changes between the staging area and your last commit.

git diff HEAD
  See all changes in the working directory since your last commit.

git diff ANOTHER_BRANCH
  compare with the latest code on another branch

git diff HEAD~1 HEAD
  compare with the previous commit (add ~2, ~3 for older commits)

REMOTES

git remote add origin URL_OF_GITHUB_REMOTE
  Adds a remote github repository with the alias origin

git push origin master
  Pushes commited changes to the remote alias from master

git push -u origin master
  Allows you to only need to type git push in the future

git remote -v
  View remotes added to current repository

git remote rm NAME_OF_REMOTE
  Removes the remote link

CREATING AN SSH KEY

This can be a bit intimidating, but if you follow the steps carefully, you should be able to get this to work. (If you get stuck, GitHub also provides instructions on configuring SSH.)

    Open up Terminal.
    Anywhere in Terminal paste the following ssh-keygen -t rsa -b 4096 -C "PUT YOUR EMAIL HERE" and replace "PUT YOUR EMAIL HERE" with the email you used to sign up with GitHub.
    Once you are prompted with Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] press enter.
    You will then be prompted to enter a passphrase. Just press enter here
    You will then be prompted to enter a passphrase again. Just press enter here as well
    Paste the following in terminal: eval "$(ssh-agent -s)". If you do not see a pid number, start from the first step again.
    Paste the following in terminal: ssh-add ~/.ssh/id_rsa. if you see an error message, start from the first step again.
    Paste the following in terminal pbcopy < ~/.ssh/id_rsa.pub.
    Head over to your GitHub account (make sure you sign in).
    In the top right corner of any page, click your profile photo, then click Settings.
    In the user settings sidebar, click SSH and GPG keys.
    Click New SSH key or Add SSH key.
    In the "Title" field, add a descriptive label for the new key. For example, if you're using a personal Mac, you might call this key "Personal MacBook Air".
    Paste your key into the "Key" field. (you can just right click and click paste or use a keyboard shortcut. The previous command pbcopy did the copying for you).
    Click Add SSH key.
    If prompted, confirm your GitHub password.
    Anywhere in Terminal, type ssh -T git@github.com and if you see "Successfully authenticated" (ignore the rest of the message) you are good to go! If you do not see that, start from the beginning again.

FORKING

On github, click fork on the file you want to fork and github will clone the repository as one of yours. Now you can work on the code all you want and save changes to your version of the repository.

git clone PASTE_URL_HERE
  Now you can hit the Clone or download button to copy the repository to your local machine. Make sure to use SSH or HTTPS. This is create a folder of the repository name in your directory with git already initialized.

PULL REQUEST
  Hit create new pull request on github to request to have your code merged into the original repository.

  To get new changes made to the original repository, make sure all your changes are committed, use 
git remote add upstream git@github.com:rithmschool/learn_forking.git 
  (or other appropriate url)
  Now run 
git pull upstream master 
  to bring all the changes to the origin upstream. Then merge any conflicts. Now run
git push origin master
  to update your forked copy

git pull 
  Is a combination of git fetch and git merge. If there are branches or you want to pull manually you can run git fetch and git merge.

More info here: https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch

STASHING

git stash
  stash your commits (same as git stash save)

git stash list
  show the list of stashed changes

git stash apply
  move the latest stashed change back into the working directory, but keep it on the list

git stash pop
  move the latest stashed change back into the working directory and remove it from the list

git stash show
  show the latest stash

git stash show stash@{number}
  show a specific stashed change

REBASING
  https://www.atlassian.com/git/tutorials/merging-vs-rebasing
  https://www.rithmschool.com/courses/git/git-github-rebasing

git rebase COMMIT_SHA or HEAD~(LEVELS_BEHIND_HEAD) 
  Inlines the history behind your current work. See links for more indepth details before using. Also brush up on vi for interactive rebaseing of commits.

REVERTING

git revert COMMIT_SHA or HEAD~(LEVELS_BEHIND_HEAD)
  This is much safer than git reset for undoing a commit. If you have a commit 3-4 commits back that you reset it will undo all the work since then. Git revert will select that commit and make a new commit with the changed content. This prevents detroying someone elses work or making confusion.
